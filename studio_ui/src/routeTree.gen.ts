/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as VideosVideoIdLayoutImport } from './routes/videos/$videoId/_layout'
import { Route as LayoutContentContentImport } from './routes/_layout/content/_content'
import { Route as VideosVideoIdLayoutEditImport } from './routes/videos/$videoId/_layout.edit'
import { Route as LayoutContentContentVideosImport } from './routes/_layout/content/_content.videos'
import { Route as LayoutContentContentShortsImport } from './routes/_layout/content/_content.shorts'
import { Route as LayoutContentContentPlaylistsImport } from './routes/_layout/content/_content.playlists'

// Create Virtual Routes

const VideosVideoIdImport = createFileRoute('/videos/$videoId')()
const LayoutContentImport = createFileRoute('/_layout/content')()

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const VideosVideoIdRoute = VideosVideoIdImport.update({
  path: '/videos/$videoId',
  getParentRoute: () => rootRoute,
} as any)

const LayoutContentRoute = LayoutContentImport.update({
  path: '/content',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const VideosVideoIdLayoutRoute = VideosVideoIdLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => VideosVideoIdRoute,
} as any)

const LayoutContentContentRoute = LayoutContentContentImport.update({
  id: '/_content',
  getParentRoute: () => LayoutContentRoute,
} as any)

const VideosVideoIdLayoutEditRoute = VideosVideoIdLayoutEditImport.update({
  path: '/edit',
  getParentRoute: () => VideosVideoIdLayoutRoute,
} as any)

const LayoutContentContentVideosRoute = LayoutContentContentVideosImport.update(
  {
    path: '/videos',
    getParentRoute: () => LayoutContentContentRoute,
  } as any,
)

const LayoutContentContentShortsRoute = LayoutContentContentShortsImport.update(
  {
    path: '/shorts',
    getParentRoute: () => LayoutContentContentRoute,
  } as any,
)

const LayoutContentContentPlaylistsRoute =
  LayoutContentContentPlaylistsImport.update({
    path: '/playlists',
    getParentRoute: () => LayoutContentContentRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/content': {
      id: '/_layout/content'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof LayoutContentImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/content/_content': {
      id: '/_layout/content/_content'
      path: '/content'
      fullPath: '/content'
      preLoaderRoute: typeof LayoutContentContentImport
      parentRoute: typeof LayoutContentRoute
    }
    '/videos/$videoId': {
      id: '/videos/$videoId'
      path: '/videos/$videoId'
      fullPath: '/videos/$videoId'
      preLoaderRoute: typeof VideosVideoIdImport
      parentRoute: typeof rootRoute
    }
    '/videos/$videoId/_layout': {
      id: '/videos/$videoId/_layout'
      path: '/videos/$videoId'
      fullPath: '/videos/$videoId'
      preLoaderRoute: typeof VideosVideoIdLayoutImport
      parentRoute: typeof VideosVideoIdRoute
    }
    '/_layout/content/_content/playlists': {
      id: '/_layout/content/_content/playlists'
      path: '/playlists'
      fullPath: '/content/playlists'
      preLoaderRoute: typeof LayoutContentContentPlaylistsImport
      parentRoute: typeof LayoutContentContentImport
    }
    '/_layout/content/_content/shorts': {
      id: '/_layout/content/_content/shorts'
      path: '/shorts'
      fullPath: '/content/shorts'
      preLoaderRoute: typeof LayoutContentContentShortsImport
      parentRoute: typeof LayoutContentContentImport
    }
    '/_layout/content/_content/videos': {
      id: '/_layout/content/_content/videos'
      path: '/videos'
      fullPath: '/content/videos'
      preLoaderRoute: typeof LayoutContentContentVideosImport
      parentRoute: typeof LayoutContentContentImport
    }
    '/videos/$videoId/_layout/edit': {
      id: '/videos/$videoId/_layout/edit'
      path: '/edit'
      fullPath: '/videos/$videoId/edit'
      preLoaderRoute: typeof VideosVideoIdLayoutEditImport
      parentRoute: typeof VideosVideoIdLayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutContentContentRouteChildren {
  LayoutContentContentPlaylistsRoute: typeof LayoutContentContentPlaylistsRoute
  LayoutContentContentShortsRoute: typeof LayoutContentContentShortsRoute
  LayoutContentContentVideosRoute: typeof LayoutContentContentVideosRoute
}

const LayoutContentContentRouteChildren: LayoutContentContentRouteChildren = {
  LayoutContentContentPlaylistsRoute: LayoutContentContentPlaylistsRoute,
  LayoutContentContentShortsRoute: LayoutContentContentShortsRoute,
  LayoutContentContentVideosRoute: LayoutContentContentVideosRoute,
}

const LayoutContentContentRouteWithChildren =
  LayoutContentContentRoute._addFileChildren(LayoutContentContentRouteChildren)

interface LayoutContentRouteChildren {
  LayoutContentContentRoute: typeof LayoutContentContentRouteWithChildren
}

const LayoutContentRouteChildren: LayoutContentRouteChildren = {
  LayoutContentContentRoute: LayoutContentContentRouteWithChildren,
}

const LayoutContentRouteWithChildren = LayoutContentRoute._addFileChildren(
  LayoutContentRouteChildren,
)

interface LayoutRouteChildren {
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutContentRoute: typeof LayoutContentRouteWithChildren
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutContentRoute: LayoutContentRouteWithChildren,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface VideosVideoIdLayoutRouteChildren {
  VideosVideoIdLayoutEditRoute: typeof VideosVideoIdLayoutEditRoute
}

const VideosVideoIdLayoutRouteChildren: VideosVideoIdLayoutRouteChildren = {
  VideosVideoIdLayoutEditRoute: VideosVideoIdLayoutEditRoute,
}

const VideosVideoIdLayoutRouteWithChildren =
  VideosVideoIdLayoutRoute._addFileChildren(VideosVideoIdLayoutRouteChildren)

interface VideosVideoIdRouteChildren {
  VideosVideoIdLayoutRoute: typeof VideosVideoIdLayoutRouteWithChildren
}

const VideosVideoIdRouteChildren: VideosVideoIdRouteChildren = {
  VideosVideoIdLayoutRoute: VideosVideoIdLayoutRouteWithChildren,
}

const VideosVideoIdRouteWithChildren = VideosVideoIdRoute._addFileChildren(
  VideosVideoIdRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/': typeof LayoutIndexRoute
  '/content': typeof LayoutContentContentRouteWithChildren
  '/videos/$videoId': typeof VideosVideoIdLayoutRouteWithChildren
  '/content/playlists': typeof LayoutContentContentPlaylistsRoute
  '/content/shorts': typeof LayoutContentContentShortsRoute
  '/content/videos': typeof LayoutContentContentVideosRoute
  '/videos/$videoId/edit': typeof VideosVideoIdLayoutEditRoute
}

export interface FileRoutesByTo {
  '/': typeof LayoutIndexRoute
  '/content': typeof LayoutContentContentRouteWithChildren
  '/videos/$videoId': typeof VideosVideoIdLayoutRouteWithChildren
  '/content/playlists': typeof LayoutContentContentPlaylistsRoute
  '/content/shorts': typeof LayoutContentContentShortsRoute
  '/content/videos': typeof LayoutContentContentVideosRoute
  '/videos/$videoId/edit': typeof VideosVideoIdLayoutEditRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/content': typeof LayoutContentRouteWithChildren
  '/_layout/content/_content': typeof LayoutContentContentRouteWithChildren
  '/videos/$videoId': typeof VideosVideoIdRouteWithChildren
  '/videos/$videoId/_layout': typeof VideosVideoIdLayoutRouteWithChildren
  '/_layout/content/_content/playlists': typeof LayoutContentContentPlaylistsRoute
  '/_layout/content/_content/shorts': typeof LayoutContentContentShortsRoute
  '/_layout/content/_content/videos': typeof LayoutContentContentVideosRoute
  '/videos/$videoId/_layout/edit': typeof VideosVideoIdLayoutEditRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/'
    | '/content'
    | '/videos/$videoId'
    | '/content/playlists'
    | '/content/shorts'
    | '/content/videos'
    | '/videos/$videoId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/content'
    | '/videos/$videoId'
    | '/content/playlists'
    | '/content/shorts'
    | '/content/videos'
    | '/videos/$videoId/edit'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/'
    | '/_layout/content'
    | '/_layout/content/_content'
    | '/videos/$videoId'
    | '/videos/$videoId/_layout'
    | '/_layout/content/_content/playlists'
    | '/_layout/content/_content/shorts'
    | '/_layout/content/_content/videos'
    | '/videos/$videoId/_layout/edit'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  VideosVideoIdRoute: typeof VideosVideoIdRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  VideosVideoIdRoute: VideosVideoIdRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/videos/$videoId"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/",
        "/_layout/content"
      ]
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/content": {
      "filePath": "_layout/content",
      "parent": "/_layout",
      "children": [
        "/_layout/content/_content"
      ]
    },
    "/_layout/content/_content": {
      "filePath": "_layout/content/_content.tsx",
      "parent": "/_layout/content",
      "children": [
        "/_layout/content/_content/playlists",
        "/_layout/content/_content/shorts",
        "/_layout/content/_content/videos"
      ]
    },
    "/videos/$videoId": {
      "filePath": "videos/$videoId",
      "children": [
        "/videos/$videoId/_layout"
      ]
    },
    "/videos/$videoId/_layout": {
      "filePath": "videos/$videoId/_layout.tsx",
      "parent": "/videos/$videoId",
      "children": [
        "/videos/$videoId/_layout/edit"
      ]
    },
    "/_layout/content/_content/playlists": {
      "filePath": "_layout/content/_content.playlists.tsx",
      "parent": "/_layout/content/_content"
    },
    "/_layout/content/_content/shorts": {
      "filePath": "_layout/content/_content.shorts.tsx",
      "parent": "/_layout/content/_content"
    },
    "/_layout/content/_content/videos": {
      "filePath": "_layout/content/_content.videos.tsx",
      "parent": "/_layout/content/_content"
    },
    "/videos/$videoId/_layout/edit": {
      "filePath": "videos/$videoId/_layout.edit.tsx",
      "parent": "/videos/$videoId/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
